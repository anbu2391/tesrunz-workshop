{"ast":null,"code":"var _jsxFileName = \"/home/tlspc-133/Desktop/react task/tesrunz-workshop/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport { Button, Container, Typography } from '@mui/material';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SingleAutocomplete = () => {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState([[], [], []]); // Array of selected options for each Autocomplete\n  const [errors, setErrors] = useState([false, false, false]); // Array of error states for each Autocomplete\n\n  const options = [{\n    label: 'Option 1',\n    value: 1\n  }, {\n    label: 'Option 2',\n    value: 2\n  }, {\n    label: 'Option 3',\n    value: 3\n  }];\n  const handleOptionChange = index => (event, value) => {\n    const newSelectedOptions = [...selectedOptions];\n    newSelectedOptions[index] = value;\n    setSelectedOptions(newSelectedOptions);\n    // Add your validation logic here\n    const newErrors = [...errors];\n    newErrors[index] = !value;\n    setErrors(newErrors);\n  };\n  const handleSubmit = () => {\n    const isValid = selectedOptions.every(options => options.length > 0);\n    if (isValid) {\n      console.log('Selected options:', selectedOptions);\n      // Perform further actions here (e.g., submit form)\n    } else {\n      console.log('Please select options for all Autocomplete fields.');\n      // Optionally, you can display a message to the user or highlight the invalid fields\n      setErrors(errors.map(error => !error));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainHead\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"sm\",\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        align: \"center\",\n        gutterBottom: true,\n        children: \"Single Autocomplete with Validation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 7\n      }, this), [0, 1, 2].map(index => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: '30px'\n        },\n        children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n          multiple: true,\n          value: selectedOptions[index],\n          onChange: handleOptionChange(index),\n          options: options,\n          getOptionLabel: option => option.label,\n          renderInput: params => /*#__PURE__*/_jsxDEV(TextField, {\n            ...params,\n            label: `Select options ${index + 1}`,\n            variant: \"outlined\",\n            error: errors[index],\n            helperText: errors[index] ? 'Please select an option' : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleSubmit,\n        style: {\n          marginTop: '20px'\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(SingleAutocomplete, \"8iKvqTvlfbXn0t35wYRg+9QogFY=\");\n_c = SingleAutocomplete;\nexport default SingleAutocomplete;\nvar _c;\n$RefreshReg$(_c, \"SingleAutocomplete\");","map":{"version":3,"names":["React","useState","Autocomplete","TextField","Button","Container","Typography","jsxDEV","_jsxDEV","SingleAutocomplete","_s","selectedOptions","setSelectedOptions","errors","setErrors","options","label","value","handleOptionChange","index","event","newSelectedOptions","newErrors","handleSubmit","isValid","every","length","console","log","map","error","className","children","maxWidth","variant","align","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","multiple","onChange","getOptionLabel","option","renderInput","params","helperText","color","onClick","_c","$RefreshReg$"],"sources":["/home/tlspc-133/Desktop/react task/tesrunz-workshop/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Autocomplete from '@mui/material/Autocomplete';\nimport TextField from '@mui/material/TextField';\nimport { Button, Container, Typography } from '@mui/material';\nimport './App.css';\n\nconst SingleAutocomplete = () => {\n  const [selectedOptions, setSelectedOptions] = useState([[], [], []]); // Array of selected options for each Autocomplete\n  const [errors, setErrors] = useState([false, false, false]); // Array of error states for each Autocomplete\n\n  const options = [\n    { label: 'Option 1', value: 1 },\n    { label: 'Option 2', value: 2 },\n    { label: 'Option 3', value: 3 },\n  ];\n\n  const handleOptionChange = (index) => (event, value) => {\n    const newSelectedOptions = [...selectedOptions];\n    newSelectedOptions[index] = value;\n    setSelectedOptions(newSelectedOptions);\n    // Add your validation logic here\n    const newErrors = [...errors];\n    newErrors[index] = !value;\n    setErrors(newErrors);\n  };\n\n  const handleSubmit = () => {\n    const isValid = selectedOptions.every((options) => options.length > 0);\n    if (isValid) {\n      console.log('Selected options:', selectedOptions);\n      // Perform further actions here (e.g., submit form)\n    } else {\n      console.log('Please select options for all Autocomplete fields.');\n      // Optionally, you can display a message to the user or highlight the invalid fields\n      setErrors(errors.map((error) => !error));\n    }\n  };\n\n  return (\n    <div className=\"mainHead\">\n    <Container maxWidth=\"sm\">\n      <Typography variant=\"h4\" align=\"center\" gutterBottom >\n        Single Autocomplete with Validation\n      </Typography>\n      {[0, 1, 2].map((index) => (\n        <div key={index} style={{ marginTop: '30px' }}>\n          <Autocomplete\n            multiple\n            value={selectedOptions[index]}\n            onChange={handleOptionChange(index)}\n            options={options}\n            getOptionLabel={(option) => option.label}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label={`Select options ${index + 1}`}\n                variant=\"outlined\"\n                error={errors[index]}\n                helperText={errors[index] ? 'Please select an option' : ''}\n              />\n            )}\n          />\n        </div>\n      ))}\n      <Button variant=\"contained\" color=\"primary\" onClick={handleSubmit} style={{ marginTop: '20px' }}>\n        Submit\n      </Button>\n    </Container>\n    </div>\n  );\n};\n\nexport default SingleAutocomplete;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}